/**
 * ConfigCat Public Management API
 *
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { StaleFlagProductModel } from '../model/staleFlagProductModel';
// @ts-ignore
import { StaleFlagReminderScope } from '../model/staleFlagReminderScope';
// @ts-ignore
import { StaleFlagStaleInEnvironmentsType } from '../model/staleFlagStaleInEnvironmentsType';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class ZombieStaleFlagsService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * List Zombie (stale) flags for Product
     * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
     * @param productId The identifier of the Product.
     * @param scope The scope of the report.
     * @param staleFlagAgeDays The inactivity in days after a feature flag should be considered stale.
     * @param staleFlagStaleInEnvironmentsType Consider a feature flag as stale if the feature flag is stale in all/any of the environments.
     * @param ignoredEnvironmentIds Ignore environment identifiers from the report.
     * @param ignoredTagIds Ignore feature flags from the report based on their tag identifiers.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<StaleFlagProductModel>;
    public getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<StaleFlagProductModel>>;
    public getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<StaleFlagProductModel>>;
    public getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling getStaleflags.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>scope, 'scope');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>staleFlagAgeDays, 'staleFlagAgeDays');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>staleFlagStaleInEnvironmentsType, 'staleFlagStaleInEnvironmentsType');
        if (ignoredEnvironmentIds) {
            ignoredEnvironmentIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ignoredEnvironmentIds');
            })
        }
        if (ignoredTagIds) {
            ignoredTagIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ignoredTagIds');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (Basic) required
        localVarHeaders = this.configuration.addCredentialToHeaders('Basic', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/products/${this.configuration.encodeParam({name: "productId", value: productId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/staleflags`;
        return this.httpClient.request<StaleFlagProductModel>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
